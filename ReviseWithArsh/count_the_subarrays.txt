#User function Template for python3

class Solution:
    def countSubArrayProductLessThanK(self, L, n, k):
        #Code here
       m=0    
       a= [L[i: i + j] for i in range(0, n) for j in range(1, n - i + 1)]
       for i in a:
          if(sum(i)<k):
              print(i,sum(i),k)
              m+=1
       return m
    
    
    

#{ 
#  Driver Code Starts
#Initial Template for Python 3

def main():

    T = int(input())

    while(T > 0):
        n, k = [int(x) for x in input().strip().split()]
        arr = [int(x) for x in input().strip().split()]
        
        print(Solution().countSubArrayProductLessThanK(arr, n, k))

        T -= 1


if __name__ == "__main__":
    main()


# } Driver Code Ends




c++

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends


class Solution{
  public:
    int countSubArrayProductLessThanK(const vector<int>& a, int n, long long k) {
        
        if(n==1)
        {
            if(a[0]<k) return 1;
            else return 0;
        }
        
        long long prePro = 1;
        int i=0,j=0;
        long count = 0;
        while(j<n)
        {
            prePro*=a[j];
            
            while(prePro>=k and i<=j)
            {   
                prePro/=a[i];
                i++;
            }
            
            //Count the length of the window
            count+=(j-i+1);
            
            j++;
        }
        
        return (int)count;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        long long int k;
        cin >> n >> k;
        vector<int> arr(n);
        for (i = 0; i < n; i++) cin >> arr[i];
        Solution obj;
        cout << obj.countSubArrayProductLessThanK(arr, n, k) << endl;
    }
    return 0;
}
  // } Driver Code Ends